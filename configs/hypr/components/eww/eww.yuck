(include "./sidebars/powermenu.yuck")
(include "./sidebars/volumemenu.yuck")
(include "./sidebars/statsmenu.yuck")
(include "./sidebars/calendar.yuck")
; -VARIABLES--------------------------------------------------------------------
; ------------------------------------------------------------------------------
(defvar eww "/usr/bin/eww -c $HOME/.config/hypr/components/eww")


(defpoll active :interval "100ms" "hyprctl -j activewindow")
(defpoll workspaces :interval "100ms" "hyprctl -j workspaces")

(defpoll time :interval "10s" "date \"+%H : %M\"")
(defpoll date :interval "1m" "date \"+%B %d\"")

(defpoll volume :interval "100ms" "pamixer --get-volume")
(defpoll volin :interval "100ms" "pamixer --default-source --get-volume")


(defvar powervis false)
(defvar volvis false)
(defvar statsvis false)
(defvar calvis false)


; -BAR GENERAL------------------------------------------------------------------
; ------------------------------------------------------------------------------
(defwindow topBar1
  :monitor 1
  :geometry (geometry 
    :x "0px"
    :y "4px"
    :width "100%"
    :height "34px"
    :anchor "top left"
  )
  :stacking "fg"                                                 ;fg, bg, bottom, overlay
  :focusable false
  (box
    (left)  (center)  (right)
  )
)

(defwindow topBar2
  :monitor 0
  :geometry (geometry 
    :x "0px"
    :y "4px"
    :width "100%"
    :height "34px"
    :anchor "top left"
  )
  :stacking "fg"                                                 ;fg, bg, bottom, overlay
  :focusable false
  (box
    (left)  (center)  (right)
  )
)


; ------------------------------------------------------------------------------
; LAYOUT

(defwidget left []
  (box
    :class "container-left"
    :orientation "horizontal"
    :space-evenly false
    :halign "start"

    (pill (my_active)) "⠀⠀" (my_workspaces)
  )
)

(defwidget center []
  (box
    :class "container-center"
    :orientation "horizontal"
    :space-evenly false
    :halign "center"

    (eventbox :onhover "${eww} update calvis=true"
      (pill "⠀" (my_date) "⠀|⠀" (my_time) "⠀")
    )
  )
)

(defwidget right []
  (box
    :class "container-right"
    :orientation "h"
    :space-evenly false
    :halign "end"

    (my_network_down)(my_network_up) 
    (eventbox :onhover "${eww} update statsvis=true"
      (pill (my_cpu_temp) "⠀|⠀" (my_cpu_usage) "⠀|⠀" (my_mem_usage))
    )
    (pill (my_audio))
    (pill (my_power))
  )
)

(defwidget pill []
  (box
    :class "pill"
    :space-evenly false
    (children)
  )
)


; -WIDGETS----------------------------------------------------------------------
; ------------------------------------------------------------------------------
; WIDGETS LEFT

(defwidget my_active []
  (box
    :class "activewindow"
    {active.class != "null" ? "类 ${active.class}" : "类 Hyprland"}
  )
)

(defwidget my_workspaces []
  (box
    :class "general"
    (for entry in workspaces
      (eventbox
        :onclick "~/.config/hypr/scripts/changeworkspace ${entry.name}"
        :halign "start" 
        :class {active.workspace.name == entry.name ? "activeworkspace" : ""}
        "⠀${entry.name}⠀"
        )
    )
  )
)


; ------------------------------------------------------------------------------
; WIDGETS CENTER

(defwidget my_date []
  (box
    :class "date"
    :tooltip "Tooltip"
    "  ${date}"
  )
)

(defwidget my_time []
  (box
    :class "time"
    :tooltip "Tooltip"
    "${time} "
  )
)


; ------------------------------------------------------------------------------
; WIDGETS RIGHT

(defwidget my_network_down []
  (box
    :class {EWW_NET.enp4s0.NET_DOWN == 0 ? "downoff" : "downon"}
    :tooltip "Down: ${EWW_NET.enp4s0.NET_DOWN} - Up: ${EWW_NET.enp4s0.NET_UP}"
    " "
  )
)

(defwidget my_network_up []
  (box
    :class {EWW_NET.enp4s0.NET_UP == 0 ? "upoff" : "upon"}
    :tooltip "Down: ${EWW_NET.enp4s0.NET_DOWN} - Up: ${EWW_NET.enp4s0.NET_UP}"
    ""
  )
)

(defwidget my_cpu_temp []
  (box
    :class "cpu-temp"
    " "(circular-progress 
      :value "${EWW_TEMPS.K10TEMP_TCTL}"
      :start-at 0
      :orientation "h"
      :thickness 4
      (box
        :class "dot"
        "•"
      )
    )
  )
)

(defwidget my_cpu_usage []
  (box
    :class "cpu-usage"
    " " (circular-progress 
      :value "${EWW_CPU.avg}"
      :start-at 0
      :orientation "h"
      :thickness 4
      (box
        :class "dot"
        "•"
      )
    )
  )
)

(defwidget my_mem_usage []
  (box
    :class "mem-usage"
    " " (circular-progress 
      :value "${100 / EWW_RAM.total_mem * EWW_RAM.used_mem}"
      :start-at 0
      :orientation "h"
      :thickness 4
      (box
        :class "dot"
        "•"
      )
    )
  )
)

(defwidget my_audio []
  (eventbox
    :class "audio"
    :onhover "${eww} update volvis=true"
    (box
      "墳 " (circular-progress
        :value volume
        :start-at 0
        :thickness 6
        (box
          :class "dot"
          "•"
        )
      )
    )
  )
)

(defwidget my_power []
  (eventbox
    :class "power"
    :width 20
    :onhover "${eww} update powervis=true"
    (circular-progress
      :value "100"
      :start-at 0
      :thickness 6
      (box
        :class "dot"
        "•"
      )
    )
  )
)
